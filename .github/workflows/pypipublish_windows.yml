name: Windows Package github deploy

on: 
  workflow_dispatch:
    inputs:
      build_tag:
        description: 'The tag and version of the release.'     
        required: true
        default: '0.x.x-win_amd64-beta.x'

jobs:
  build-windows-wheel:

    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
      with:
          submodules: true
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools wheel twine auditwheel
    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1.0.0
    - name: Setup Bazel
      uses: abhinavsingh/setup-bazel@v3
    - name: Build PyDP
      run: |
         bazel build --cxxopt='/std:c++17' src/python:bindings_test --verbose_failures
         copy bazel-bin\src\bindings\_pydp.so pydp\_pydp.pyd
         python setup.py bdist_wheel
         $version=(python -c "import pydp; print(pydp.__version__)")
         echo "::set-output name=version::$version"
         $wheel_path=ls .\dist
         echo "::set-output name=wheel_path::$wheel_path"
         echo "::set-output name=wheel_name::$wheel_path.name"

      id: build-pydp
    - name: Test the wheel
      run: |
          python -m pip install ${{steps.build-pydp.outputs.wheel_path}}
          python -m pip install pytest
          pytest tests/  
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ matrix.python-version }}-${{ github.event.inputs.build_tag }}
        release_name: Release ${{ matrix.python-version }}-${{ github.event.inputs.build_tag }}
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{steps.build-pydp.outputs.wheel_path}}
        asset_name: ${{ steps.build-pydp.outputs.wheel_name}}
        asset_content_type: application/zip
  
        # - name: Build and publish
    #   env:
    #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
    #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    #   run: |
    #     pip wheel . -w wheel/
    #     twine upload --skip-existing wheel/*